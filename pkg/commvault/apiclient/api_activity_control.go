
/*
 * Commvault REST API
 *
 * Commvault APIs
 *
 * API version: LATEST
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package apiclient

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type ActivityControlApiService service
/*
ActivityControlApiService Disable Activity Control For Entity
API to disable activity control for an entity. Available activityType are 1 - Backup, 2 - Restore, 16 - Archieve pruning/ data aging 128 - All Job Activity, 256 - Scheduler
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param entityType Entity type to enable activity control like subclient, instance, server, server group. Available entityType are 3 - server 4 - Application type 5 - instance 7 - subclient 28 - server group
 * @param entityId Entity Id to disable activity control like subclient, instance, server, server group.
 * @param activityType denotes the activity type being considered.
 * @param optional nil or *ActivityControlApiDisableActivityControlForEntityOpts - Optional Parameters:
     * @param "ClientId" (optional.Int32) -  clientId is mandatory when application entity type is passed.
     * @param "EnableAfterDelayTime" (optional.Int32) -  epoch timestamp on which activity control should be automatically enabled back
     * @param "EnableAfterDelayTimeZone" (optional.Int32) -  timezone ID
@return GenericResp
*/

type ActivityControlApiDisableActivityControlForEntityOpts struct {
    ClientId optional.Int32
    EnableAfterDelayTime optional.Int32
    EnableAfterDelayTimeZone optional.Int32
}

func (a *ActivityControlApiService) DisableActivityControlForEntity(ctx context.Context, entityType int32, entityId int32, activityType int32, localVarOptionals *ActivityControlApiDisableActivityControlForEntityOpts) (GenericResp, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Put")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue GenericResp
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/V4/Entity/{entityType}/{entityId}/ActivityControl/{activityType}/Action/Disable"
	localVarPath = strings.Replace(localVarPath, "{"+"entityType"+"}", fmt.Sprintf("%v", entityType), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"entityId"+"}", fmt.Sprintf("%v", entityId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"activityType"+"}", fmt.Sprintf("%v", activityType), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ClientId.IsSet() {
		localVarQueryParams.Add("clientId", parameterToString(localVarOptionals.ClientId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnableAfterDelayTime.IsSet() {
		localVarQueryParams.Add("enableAfterDelayTime", parameterToString(localVarOptionals.EnableAfterDelayTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnableAfterDelayTimeZone.IsSet() {
		localVarQueryParams.Add("enableAfterDelayTimeZone", parameterToString(localVarOptionals.EnableAfterDelayTimeZone.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authtoken"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v GenericResp
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
ActivityControlApiService Enable Activity Control For Entity
API to enable activity control for an entity Available activityType are 1 - Backup, 2 - Restore, 16 - Archieve pruning/ data aging 128 - All Job Activity, 256 - Scheduler
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param entityType Entity type to enable activity control like subclient, instance, server, server group. Available entityType are 3 - server 4 - Application type 5 - instance 7 - subclient 28 - server group
 * @param entityId Entity Id to enable activity control like subclient, instance, server, server group.
 * @param activityType denotes the activity type being considered
 * @param optional nil or *ActivityControlApiEnableActivityControlForEntityOpts - Optional Parameters:
     * @param "ClientId" (optional.Int32) -  clientId is mandatory when application entity type is passed
@return GenericResp
*/

type ActivityControlApiEnableActivityControlForEntityOpts struct {
    ClientId optional.Int32
}

func (a *ActivityControlApiService) EnableActivityControlForEntity(ctx context.Context, entityType int32, entityId int32, activityType int32, localVarOptionals *ActivityControlApiEnableActivityControlForEntityOpts) (GenericResp, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Put")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue GenericResp
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/V4/Entity/{entityType}/{entityId}/ActivityControl/{activityType}/Action/Enable"
	localVarPath = strings.Replace(localVarPath, "{"+"entityType"+"}", fmt.Sprintf("%v", entityType), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"entityId"+"}", fmt.Sprintf("%v", entityId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"activityType"+"}", fmt.Sprintf("%v", activityType), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ClientId.IsSet() {
		localVarQueryParams.Add("clientId", parameterToString(localVarOptionals.ClientId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authtoken"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v GenericResp
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
 * Commvault REST API
 *
 * Commvault APIs
 *
 * API version: LATEST
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package apiexplorer

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

type LoginResponseCustomerManaged struct {
	AliasName           string `json:"aliasName"`
	UserGUID            string `json:"userGUID"`
	LoginAttempts       int    `json:"loginAttempts"`
	RemainingLockTime   int    `json:"remainingLockTime"`
	SmtpAddress         string `json:"smtpAddress"`
	UserName            string `json:"userName"`
	ProviderType        int    `json:"providerType"`
	Ccn                 int    `json:"ccn"`
	Token               string `json:"token"`
	Capability          int    `json:"capability"`
	ForcePasswordChange bool   `json:"forcePasswordChange"`
	IsAccountLocked     bool   `json:"isAccountLocked"`
	OwnerOrganization   struct {
		GUID               string `json:"GUID"`
		ProviderId         int    `json:"providerId"`
		ProviderDomainName string `json:"providerDomainName"`
	} `json:"ownerOrganization"`
	AdditionalResp struct {
		NameValues []struct {
			Name  string `json:"name"`
			Value string `json:"value"`
		} `json:"nameValues"`
	} `json:"additionalResp"`
	ProviderOrganization struct {
		GUID               string `json:"GUID"`
		ProviderId         int    `json:"providerId"`
		ProviderDomainName string `json:"providerDomainName"`
	} `json:"providerOrganization"`
	ErrList []struct {
		Company struct {
			ProviderId         int    `json:"providerId"`
			ProviderDomainName string `json:"providerDomainName"`
		} `json:"company"`
	} `json:"errList"`
}

type LoginOpts struct {
	Username string
	Password string
}

func (c *APIClient) Login(ctx context.Context, localVarOptionals *LoginOpts) (LoginResponseCustomerManaged, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue LoginResponseCustomerManaged
	)
	// create path and map variables
	localVarPath := c.common.client.cfg.BasePath + "/Login"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/plain"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params

	localVarPostBody = &localVarOptionals

	r, err := c.common.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := c.common.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = c.common.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v GenericResp
			err = c.common.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v string
			err = c.common.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v GenericResp
			err = c.common.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
